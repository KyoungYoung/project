"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
/* eslint-disable @typescript-eslint/no-dynamic-delete */
/* eslint-disable dot-notation */
var url_1 = require("url");
var parseEndpoint_1 = __importDefault(require("./parseEndpoint"));
var normalizeQuery_1 = __importDefault(require("./normalizeQuery"));
var requests_1 = __importDefault(require("./requests"));
var catchHTTPErrors_1 = __importDefault(require("./catchHTTPErrors"));
var DataController_1 = __importDefault(require("../DataController"));
var createEndpoint = function (type, endpoint) {
    var data = DataController_1.default.getInstance();
    return function (options) { return __awaiter(void 0, void 0, void 0, function () {
        var readyQuery, parsedEndpoint, response, query, _a, error_1;
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0:
                    readyQuery = new url_1.URLSearchParams({
                        api_key: data.get('apiKey'),
                        language: data.get('language'),
                    });
                    parsedEndpoint = null;
                    response = null;
                    if (options === null || options === void 0 ? void 0 : options.pathParameters)
                        parsedEndpoint = parseEndpoint_1.default(endpoint, options.pathParameters);
                    if (options === null || options === void 0 ? void 0 : options.query) {
                        query = options.query;
                        if (query['api_key'])
                            delete query['api_key'];
                        if (query['language'])
                            delete query['language'];
                        // eslint-disable-next-line array-bracket-newline
                        normalizeQuery_1.default(query).forEach(function (_a) {
                            var key = _a[0], value = _a[1];
                            readyQuery === null || readyQuery === void 0 ? void 0 : readyQuery.append(key, value);
                        });
                    }
                    _b.label = 1;
                case 1:
                    _b.trys.push([1, 9, , 10]);
                    _a = type;
                    switch (_a) {
                        case 'GET': return [3 /*break*/, 2];
                        case 'POST': return [3 /*break*/, 4];
                        case 'DELETE': return [3 /*break*/, 6];
                    }
                    return [3 /*break*/, 8];
                case 2: return [4 /*yield*/, requests_1.default(parsedEndpoint !== null && parsedEndpoint !== void 0 ? parsedEndpoint : endpoint, { searchParams: readyQuery !== null && readyQuery !== void 0 ? readyQuery : '' })];
                case 3:
                    response = _b.sent();
                    return [3 /*break*/, 8];
                case 4: return [4 /*yield*/, requests_1.default.post(endpoint, {
                        searchParams: readyQuery !== null && readyQuery !== void 0 ? readyQuery : '',
                        json: options === null || options === void 0 ? void 0 : options.body,
                    })];
                case 5:
                    response = _b.sent();
                    return [3 /*break*/, 8];
                case 6: return [4 /*yield*/, requests_1.default.delete(endpoint, {
                        searchParams: readyQuery !== null && readyQuery !== void 0 ? readyQuery : '',
                        json: options === null || options === void 0 ? void 0 : options.body,
                    })];
                case 7:
                    response = _b.sent();
                    return [3 /*break*/, 8];
                case 8: return [2 /*return*/, {
                        data: JSON.parse(response.body),
                        headers: response.headers,
                    }];
                case 9:
                    error_1 = _b.sent();
                    catchHTTPErrors_1.default(error_1);
                    throw error_1;
                case 10: return [2 /*return*/];
            }
        });
    }); };
};
exports.default = (function (endpoints) {
    var root = {};
    endpoints.forEach(function (endpoint) {
        root[endpoint.name] = createEndpoint(endpoint.type, endpoint.endpoint);
    });
    return root;
});
